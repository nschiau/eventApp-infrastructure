pipeline {
    agent any
    tools {
        nodejs 'NodeJS'
    }

    environment {
        DOTNET_ROOT = '/usr/share/dotnet'
        GITHUB_TOKEN = credentials('git-token')
    }

    stages {
        stage('Checkout Backend') {
            steps {
                dir('backend') {
                    git branch: 'dev', url: 'https://github.com/nschiau/eventApp-backend.git'
                }
            }
        }

        stage('Checkout Frontend') {
            steps {
                dir('frontend') {
                    git branch: 'dev', url: 'https://github.com/nschiau/eventApp-frontend.git'
                }
            }
        }

        stage('Restore, Build and Test Backend') {
            steps {
                dir('backend') {
                    sh '''
                    dotnet restore src/EventHorizon.Api/EventHorizon.Api.csproj
                    dotnet build --no-restore src/EventHorizon.Api/EventHorizon.Api.csproj --configuration Release
                    dotnet test --no-build --verbosity normal tests/EventHorizon.Api.Tests/EventHorizon.Api.Tests.csproj
                    '''
                }
            }
        }

        stage('Install dependencies, Build and Test Frontend') {
            steps {
                dir('frontend') {
                    sh '''
                    npm install
                    npm run build
                    npm test || echo "No frontend tests configured"
                    '''
                }
            }
        }

        stage('Promote to Staging (Auto Merge)') {
            when { expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' } }
            steps {
                script {
                    sh '''
                    set -e
                    export PATH=$PATH:/usr/bin

                    echo "Verifying GitHub authentication..."
                    gh auth status || true

                    for repo in backend frontend; do
                    echo "Processing ${repo^^} repository..."
                    cd $repo

                    # Check if there are commits to promote
                    COMMITS=$(git fetch origin && git rev-list origin/staging..origin/dev --count)
                    if [ "$COMMITS" -eq 0 ]; then
                        echo "No new commits to promote for $repo, skipping PR."
                        cd ..
                        continue
                    fi

                    # Try to find or create a PR
                    PR_NUM=$(gh pr list --base staging --head dev --json number --jq '.[0].number')
                    if [ -z "$PR_NUM" ]; then
                        gh pr create --base staging --head dev --title "Sync dev â†’ staging ($repo)" --body "Auto PR from Jenkins CI" || true
                        PR_NUM=$(gh pr list --base staging --head dev --json number --jq '.[0].number')
                    fi

                    if [ -z "$PR_NUM" ]; then
                        echo "PR could not be created for $repo (no changes), skipping."
                        cd ..
                        continue
                    fi

                    echo "Merging PR #$PR_NUM for $repo ..."
                    gh pr merge "$PR_NUM" --merge --admin --delete-branch=false || true
                    cd ..
                    done
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo 'Jenkins CI pipeline completed successfully.'
        }
        failure {
            echo 'Jenkins CI pipeline failed.'
        }
    }
}
