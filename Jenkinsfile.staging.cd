pipeline {
    agent any

    environment {
        SSH_CRED = 'staging-ssh'                    // SSH key credential ID
        DOCKER_CRED = 'dockerhub-token'             // Docker Hub credential ID
        REMOTE_USER = 'vagrant'                     // user on staging box
        REMOTE_HOST = '192.168.10.16'               // staging box IP
        DOCKER_IMAGE = 'nschiau/eventapp:be-staging' // full image name:tag
        CONTAINER_NAME = 'eventapp-be'
        DB_CONTAINER = 'eventapp-db'
        NETWORK = 'eventapp-net'
        PORT = '8080'
        DB_PASSWORD = 'mysecretpassword'            // use Jenkins secret for production
    }

    stages {
        stage('Create Docker Network') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} \
                        "docker network create $NETWORK || true"
                    """
                }
            }
        }

        stage('Start PostgreSQL Container') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            if [ -z "\$(docker ps -q -f name=$DB_CONTAINER)" ]; then
                                echo "Starting PostgreSQL container..."
                                docker run -d --name $DB_CONTAINER --network $NETWORK \\
                                    -e POSTGRES_PASSWORD=$DB_PASSWORD \\
                                    -p 5432:5432 postgres:latest
                            else
                                echo "PostgreSQL container already running."
                            fi
                        '
                    """
                }
            }
        }

        stage('Pull Latest Docker Image') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} \
                        "docker pull ${DOCKER_IMAGE}"
                    """
                }
            }
        }

        stage('Stop Existing App Container') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} \
                        "docker stop $CONTAINER_NAME || true && docker rm $CONTAINER_NAME || true"
                    """
                }
            }
        }

        stage('Start New App Container') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            echo "Starting new app container..."
                            docker run -d --name $CONTAINER_NAME --network $NETWORK -p $PORT:8080 ${DOCKER_IMAGE}
                        '
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                sshagent(credentials: ["${SSH_CRED}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            echo "Waiting for app to start..."
                            sleep 10
                            curl -f http://localhost:$PORT/health || echo "Health check failed."
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed. Check the Jenkins logs for details.'
        }
        always {
            echo 'Deployment pipeline finished.'
        }
    }
}
