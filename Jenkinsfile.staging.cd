pipeline {
    agent any

    environment {
        SSH_CRED = 'staging-ssh'                      // SSH key credential ID
        DOCKER_CRED = 'dockerhub-token'               // Docker Hub credential ID
        REMOTE_USER = 'vagrant'                       // user on staging box
        REMOTE_HOST = '192.168.10.16'                 // staging box IP
        DOCKER_IMAGE = 'nschiau/eventapp:be-staging'  // backend image
        CONTAINER_NAME = 'eventapp-be'                // backend container
        DB_CONTAINER = 'eventapp-db'                  // postgres container
        DB_VOLUME = 'eventapp_pgdata'                 // persistent DB volume
        NETWORK = 'eventapp-net'                      // shared Docker network
        PORT = '8080'                                 // exposed app port
    }

    stages {

        /* ---------------------------------------- *
         * 1Ô∏è‚É£ LOGIN TO DOCKER HUB
         * ---------------------------------------- */
        stage('Login to Docker Hub') {
            steps {
                sshagent (credentials: ["${SSH_CRED}"]) {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CRED}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            echo "‚úÖ Logged into Docker Hub"
                        '
                        """
                    }
                }
            }
        }

        /* ---------------------------------------- *
         * 2Ô∏è‚É£ SETUP NETWORK AND DATABASE
         * ---------------------------------------- */
        stage('Setup Network and Database') {
            steps {
                sshagent (credentials: ["${SSH_CRED}"]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                        echo "üîπ Creating Docker network if not exists..."
                        docker network inspect ${NETWORK} >/dev/null 2>&1 || docker network create ${NETWORK}

                        echo "üîπ Checking PostgreSQL container..."
                        if [ ! "$(docker ps -aq -f name=${DB_CONTAINER})" ]; then
                            echo "‚öôÔ∏è Creating PostgreSQL container..."
                            docker run -d \\
                                --name ${DB_CONTAINER} \\
                                --network ${NETWORK} \\
                                -v ${DB_VOLUME}:/var/lib/postgresql/data \\
                                -e POSTGRES_USER=postgres \\
                                -e POSTGRES_PASSWORD=postgres \\
                                -e POSTGRES_DB=eventhorizon \\
                                postgres:16
                        else
                            echo "‚ÑπÔ∏è PostgreSQL container already exists ‚Äî starting if stopped."
                            docker start ${DB_CONTAINER} || true
                        fi
                    '
                    """
                }
            }
        }

        /* ---------------------------------------- *
         * 3Ô∏è‚É£ INITIALIZE DATABASE
         * ---------------------------------------- */
        stage('Initialize Database') {
            steps {
                sshagent (credentials: ["${SSH_CRED}"]) {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CRED}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                            set -e

                            echo "üîπ Waiting for PostgreSQL to be ready..."
                            for i in {1..15}; do
                                if docker exec ${DB_CONTAINER} pg_isready -U postgres -d eventhorizon >/dev/null 2>&1; then
                                    echo "‚úÖ PostgreSQL is ready!"
                                    break
                                fi
                                echo "‚è≥ Waiting for DB... (\$i/15)"
                                sleep 3
                            done

                            echo "üîπ Pulling latest backend image..."
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker pull ${DOCKER_IMAGE}

                            echo "üîπ Extracting init-db.sql from backend image..."
                            docker create --name temp ${DOCKER_IMAGE} >/dev/null
                            docker cp temp:/app/init-db.sql /home/${REMOTE_USER}/init-db.sql
                            docker rm temp >/dev/null

                            echo "üîπ Applying database initialization script..."
                            docker exec -i ${DB_CONTAINER} psql -U postgres -d eventhorizon < /home/${REMOTE_USER}/init-db.sql || true
                            echo "‚úÖ Database initialized (if not already)."
                        '
                        """
                    }
                }
            }
        }

        /* ---------------------------------------- *
         * 4Ô∏è‚É£ DEPLOY BACKEND CONTAINER
         * ---------------------------------------- */
        stage('Deploy Backend App') {
            steps {
                sshagent (credentials: ["${SSH_CRED}"]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                        echo "üîπ Stopping old backend container (if exists)..."
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true

                        echo "üîπ Running new backend container..."
                        docker run -d \\
                            --name ${CONTAINER_NAME} \\
                            --network ${NETWORK} \\
                            -p ${PORT}:8080 \\
                            -e ConnectionStrings__DefaultConnection="Host=${DB_CONTAINER};Database=eventhorizon;Username=postgres;Password=postgres" \\
                            ${DOCKER_IMAGE}

                        echo "‚úÖ Backend container deployed on port ${PORT}"
                    '
                    """
                }
            }
        }

        /* ---------------------------------------- *
         * 5Ô∏è‚É£ VERIFY CONTAINER STATUS
         * ---------------------------------------- */
        stage('Verify Deployment') {
            steps {
                sshagent (credentials: ["${SSH_CRED}"]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
                        echo "üîπ Checking running containers..."
                        docker ps

                        echo "üîπ Checking backend container logs..."
                        if docker ps -q -f name=${CONTAINER_NAME} >/dev/null; then
                            echo "‚úÖ Backend container is running."
                            docker logs --tail 20 ${CONTAINER_NAME} || true
                        else
                            echo "‚ùå Backend container not running!"
                            docker logs ${CONTAINER_NAME} || true
                            exit 1
                        fi
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment to staging successful.'
        }
        failure {
            echo '‚ùå Deployment failed.'
        }
    }
}
